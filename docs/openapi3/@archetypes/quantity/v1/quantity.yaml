openapi: 3.0.1
info:
  title: Quantity
  description: |2-

    <img height="100" width="100" src="/archetypes/v1/img/logo-commonalaxy.png.png" alt="OpenAPI 2.0 Business Archetypes">
    The `Quantity` archetype represents an amount of something measured according to some standard of measurement.
    ## Standards compliance
    <table>
      <thead>
        <tr><th>Standard</th><th>Contents</th></tr>
      </thead>
      <tfoot>
      </tfoot>
      <tbody>
        <tr>
          <td><a href="http://www.bipm.org/en/measurement-units/">SI</a></td>
          <td>International System of Units&mdash;Bureau International des Poids et Mesures (BIPM).</td>
        </tr>
        <tr>
          <td><a href="http://cldr.unicode.org/">Unicode CLDR</a></td>
          <td>Unicode Common Locale Data Repository provides locales-specific patterns for formatting, parsing, spelling aloud, and handling traditional/archiac numbers.</td>
        </tr>
      </tbody>
    </table>

    ---

    ## Business archetypes defined
    "A business archetype is a primordial thing that occurs consistently and universally in business domains and business software systems." (Arlow & Neustadt, [_Enterprise patterns and MDA: building better software with archetype patterns and UML_](https://www.amazon.com/Enterprise-Patterns-MDA-Building-Archetype/dp/032111230X), 2006, p. 5)

    ## Explore other business archetype patterns
    [Open a Swagger-UI](http://api.swindle.net/swagger-ui/#/) instance, then copy and paste the following Swagger specification URLs into the "Explore" text field and select the "Explore" button for additional APIs.
    1. `Locale`: https://api.swindle.net/archetypes/v1/schemas/locales/locales.yaml
    2. `Money`: http://api.swindle.net/archetypes/v1/schemas/money/money.yaml
    3. `Party`: http://api.swindle.net/archetypes/v1/schemas/parties/parties.yaml
    4. `Quantity`: http://api.swindle.net/archetypes/v1/schemas/quantities/quantities.yaml
    ---
    ## About
  contact:
    name: Greg Swindle
    url: https://github.com/commonality
  license:
    name: Apache License 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: 'Enterprise patterns and MDA: building better software with archetype
    patterns and UML'
  url: https://www.amazon.com/Enterprise-Patterns-MDA-Building-Archetype/dp/032111230X
servers:
- url: http://api.swindle.net/archetypes/v1/quantities
- url: https://api.swindle.net/archetypes/v1/quantities
tags:
- name: Systems Of Units
  description: Represents a set of related Units defined by a standard such as SI.
- name: SI (International System of Units)
  description: Standard weights and measures maintained by SI.
- name: Labor
  description: Contains a set of labor-related measures, e.g., WorkHour.
paths:
  /systems-of-units:
    get:
      tags:
      - Systems Of Units
      summary: Retrieve all systems of units.
      description: Retrieve a list of all `SystemOfUnits`.
      operationId: getSystemsOfUnits
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemOfUnits'
            application/xml:
              schema:
                $ref: '#/components/schemas/SystemOfUnits'
    post:
      tags:
      - Systems Of Units
      summary: Create an new SystemOfUnits.
      description: Create an new `SystemOfUnits`.
      operationId: createSystemOfUnits
      requestBody:
        description: The `SystemOfUnits` to be added.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemOfUnits'
          application/xml:
            schema:
              $ref: '#/components/schemas/SystemOfUnits'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemOfUnits'
            application/xml:
              schema:
                $ref: '#/components/schemas/SystemOfUnits'
      x-codegen-request-body-name: body
  /systems-of-units/{name-of-system}:
    get:
      tags:
      - Systems Of Units
      summary: Retrieve a specific system of units by name.
      description: Retrieve a specific `SystemOfUnits` using its `nameOfSystem` property's
        _case-sensitive_ value.
      operationId: getSystemOfUnitsByName
      parameters:
      - name: name-of-system
        in: path
        description: 'The name of the system of units, e.g., "SI" for the International
          System of Units (SI). <br><br>**Case-sensitivity**: `name-of-system''s`
          value is **case-sensitive**. For example, "SI" will return data, but lower-case
          "si" will result in an HTTP status code of 404 (`NotFoundError`).'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system-of-units'
            application/xml:
              schema:
                $ref: '#/components/schemas/system-of-units'
  /systems-of-units/SI/base-units/{name}:
    get:
      tags:
      - SI (International System of Units)
      summary: Retrieve a metric or unit by its SI name.
      description: Retrieve a specific `SiBaseUnit` using its `name` property's _case-sensitive_
        value.
      operationId: getSiBaseUnitByName
      parameters:
      - name: name
        in: path
        description: 'The `name` of the `SiBaseUnit`, e.g., "`metric`".<br><br>**Case-sensitivity**:
          `name''s` value is **case-sensitive**. For example, "`ampere`" will return
          data, but capitalized "`Meter`" will result in an HTTP status code of 404
          (`NotFoundError`).'
        required: true
        schema:
          type: string
          enum:
          - ampere
          - candela
          - kelvin
          - kilogram
          - meter
          - mole
          - second
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiBaseUnit'
            application/xml:
              schema:
                $ref: '#/components/schemas/SiBaseUnit'
  /systems-of-units/labor:
    post:
      tags:
      - Labor
      summary: Create an new Unit of Labor.
      description: 'Create an new `Unit` of Labor. <br><br>**Standards for `name`
        assignments.**<br><br>When creating a new `Unit`, follow these rules for the
        value of `Unit''s` `name` property:<ul><li>**Use lower case**: `name''s` value
        SHOULD be in lower case.<li>**Format with [**kebab case**](https://runkit.com/commonality/59a1c3805d3740001245a72d)**:
        `name''s` value SHOULD be given in [**kebab case**](https://runkit.com/commonality/59a1c3805d3740001245a72d).'
      operationId: createLaborUnit
      requestBody:
        description: 'The new `Unit` object to be added.<br><br>**Important**: The
          `name` of the labor `Unit`, i.e., "`work-hour`".<ul><li>**Case-sensitivity**:
          `name''s` value is **case-sensitive**. For example, "`work-hour`" will return
          data, but "Work-Hour" will result in an HTTP status code of 404 (`NotFoundError`).<li>**Format**:
          `name''s` value must be given in [**kebab case**](https://runkit.com/commonality/59a1c3805d3740001245a72d).
          For example, "`work-hour`" will return data, but "work hour" (with whitespace)
          or "`WorkHour`" (in [`PascalCase`](http://wiki.c2.com/?PascalCase)) will
          result in an HTTP status code of 404 (`NotFoundError`).'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemOfUnits'
          application/xml:
            schema:
              $ref: '#/components/schemas/SystemOfUnits'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemOfUnits'
            application/xml:
              schema:
                $ref: '#/components/schemas/SystemOfUnits'
      x-codegen-request-body-name: body
  /systems-of-units/labor/{name}:
    get:
      tags:
      - Labor
      summary: Retrieve a metric or unit by name.
      description: 'The `name` of the labor `Unit`, i.e., "`work-hour`".<ul><li>**Case-sensitivity**:
        `name''s` value is **case-sensitive**. For example, "`work-hour`" will return
        data, but "Work-Hour" will result in an HTTP status code of 404 (`NotFoundError`).<li>**Format**:
        `name''s` value must be given in [**kebab case**](https://runkit.com/commonality/59a1c3805d3740001245a72d).
        For example, "`work-hour`" will return data, but "work hour" (with whitespace)
        or "`WorkHour`" (in [`PascalCase`](http://wiki.c2.com/?PascalCase)) will result
        in an HTTP status code of 404 (`NotFoundError`).'
      operationId: getLaborUnitByName
      parameters:
      - name: name
        in: path
        description: 'The `name` of the labor `Unit`, i.e., "`work-hour`".<ul><li>**Case-sensitivity**:
          `name''s` value is **case-sensitive**. For example, "`work-hour`" will return
          data, but "Work-Hour" will result in an HTTP status code of 404 (`NotFoundError`).<li>**Format**:
          `name''s` value must be given in [**kebab case**](https://runkit.com/commonality/59a1c3805d3740001245a72d).
          For example, "`work-hour`" will return data, but "work hour" (with whitespace)
          or "`WorkHour`" (in [`PascalCase`](http://wiki.c2.com/?PascalCase)) will
          result in an HTTP status code of 404 (`NotFoundError`).'
        required: true
        schema:
          type: string
          enum:
          - work-hour
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
            application/xml:
              schema:
                $ref: '#/components/schemas/Unit'
components:
  schemas:
    SystemOfUnits:
      title: SystemOfUnits
      # type: object
      required:
      - nameOfSystem
      properties:
        nameOfStandardizationBody:
          default: null
          description: The name of the body responsible for the system.
          title: SystemOfUnits.nameOfStandardizationBody Schema
          type: string
        nameOfSystem:
          title: SystemOfUnits.nameOfSystem Schema
          type: string
          description: Represents a set of related Units defined by a standard such
            as SI.
          default: ""
      description: Represents a set of related Units defined by a standard such as
        SI.
    Metric:
      title: Metric
      required:
      - name
      - symbol
      type: object
      properties:
        definition:
          title: Metric.definition schema
          type: string
          description: The formal definition of the Metric.
          default: ""
        name:
          title: Metric.name schema
          type: string
          description: The name of the metric, e.g., "meters".
          default: ""
        symbol:
          title: Metric.symbol schema
          type: string
          description: The standard symbol of the Metric, e.g., "m" for meters. If
            no symbol exists, set symbol's value to null.
          default: null
      description: A representation of a standard of measurement.
    Unit:
      allOf:
      - $ref: '#/components/schemas/Metric'
      - type: object
        properties:
          systemOfUnits:
            $ref: http://api.swindle.net/archetypes/v1/schemas/quantities/system-of-units.yaml
      - type: object
        description: Represents a type of `Metric` that is part of a `SystemOfUnits`.
      - title: Unit
        type: object
    DerivedUnitTerm:
      allOf:
      - $ref: '#/components/schemas/Unit'
      - type: object
        description: Represents part of a DerivedUnit comprising a single Unit and
          its power.
      - type: object
        properties:
          power:
            type: integer
            description: Describes part of a `DerivedUnit` comprising a single `Unit`
              and its power.
          unit:
            $ref: '#/components/schemas/Unit'
      - title: DerivedUnitTerm
        type: object
    DerivedUnit:
      allOf:
      - $ref: '#/components/schemas/Unit'
      - type: object
        description: Represents a combination of one or more base Units according
          to a specific equation.
      - type: object
        properties:
          terms:
            type: array
            items:
              $ref: '#/components/schemas/DerivedUnitTerm'
      - title: DerivedUnit
        type: object
    RoundingPolicy:
      type: object
      properties:
        numberOfDigits:
          type: integer
          description: The number of digits before or after the decimal place.
        roundingDigit:
          type: integer
          description: A test digit with which a digit within the number being rounded
            is compared.
        roundingStep:
          type: number
          description: The multiple to which you want to round. E.g., to round a price
            of $3.1412 to an accuracy of five (5) cents, use a `roundingStep` of `0.05`.
        roundingStrategy:
          type: number
          description: |2-

            An enum that represents an aspect of a RoundingPolicy that determines the type of rounding to be applied. Allowed values are:
            * **ROUND_UP** - Rounds a number to the specified numberOfDigits, moving its value away from zero.

            * **ROUND_DOWN** - Rounds a number to the specified numberOfDigits, moving its value towards zero, thereby truncating the number at the specified precision.

            * **ROUND** - Behaves like ROUND_UP if the digit following the specified numberOfDigits is greater than or equal to the specified roundingDigit; otherwise, behaves like ROUND_DOWN. Note that the most common roundingDigit is 5.

            * **ROUND_UP_BY_STEP** - Rounds a number up to the nearest multiple of the specified `roundingStep`, moving its value away from zero. This allows numbers to be rounded in specific steps--e.g., if prices are to rounded up to the nearest 25 cents. **Note:** A `numberOfDigits` value is not required with `ROUND_UP_BY_STEP`, since `ROUND_UP_BY_STEP` also dictates the decimal precision.

            * **ROUND_DOWN_BY_STEP** - Rounds a number down to the nearest multiple of the specified `roundingStep`, moving its value towards zero. This allows numbers to be rounded in specific steps--e.g., if prices are to rounded up to the nearest 25 cents. **Note:** A `numberOfDigits` value is not required with `ROUND_DOWN_BY_STEP`, since `ROUND_DOWN_BY_STEP` also dictates the decimal precision.

            * **ROUND_TOWARDS_POSITIVE** - Behaves like `ROUND_UP` for _positive_ numbers and like `ROUND_DOWN` for _negative_ numbers.

            * **ROUND_TOWARDS_NEGATIVE** - Behaves like `ROUND_UP` for _negative_ numbers and like `ROUND_DOWN` for _positive_ numbers.
      description: Determines the mathematical semantics of the Quantity archetype's
        round() operation.
    Quantity:
      type: object
      properties:
        amount:
          type: number
          description: The total of a thing or things in number, size, value, or extent.
        metric:
          $ref: '#/components/schemas/Metric'
        roundingPolicy:
          $ref: '#/components/schemas/RoundingPolicy'
      description: Represents an amount measured in some Metric.
    WorkHour:
      allOf:
      - $ref: '#/components/schemas/Unit'
      - type: object
        properties:
          systemOfUnits:
            $ref: '#/components/schemas/SystemOfUnits'
      - type: object
        description: Represents an amount of work corresponding to one Person working
          for one hour.
    SiSystemOfUnits:
      title: SiSystemOfUnits
      required:
      - nameOfStandardizationBody
      - nameOfSystem
      type: object
      properties:
        nameOfStandardizationBody:
          title: SiSystemOfUnits.nameOfStandardizationBody Schema
          maxLength: 4
          minLength: 4
          pattern: ^(BIPM)$
          type: string
          description: The inter-governmental organization through which Member States
            act together on matters related to measurement science and measurement
            standards.
          default: BIPM
        nameOfSystem:
          title: SiSystemOfUnits.nameOfSystem Schema
          maxLength: 2
          minLength: 2
          pattern: ^(SI)$
          type: string
          description: A system of physical units (SI Units) based on the meter, kilogram,
            second, ampere, kelvin, candela, and mole, together with a set of prefixes
            to indicate multiplication or division by a power of ten.
          default: SI
    SiBaseUnit:
      allOf:
      - $ref: '#/components/schemas/Unit'
      - type: object
        description: Represents one of the based units defined in the International
          System of Units (SI).
      - type: object
        properties:
          systemOfUnits:
            $ref: '#/components/schemas/SiSystemOfUnits'
      - title: SiBaseUnit
        type: object
    Meter:
      allOf:
      - $ref: '#/components/schemas/SiBaseUnit'
      - type: object
        description: A unit of length.
      - type: object
        properties:
          name:
            type: object
          symbol:
            type: object
          definition:
            type: object
      - title: Meter
        type: object
    Second:
      allOf:
      - $ref: '#/components/schemas/SiBaseUnit'
      - type: object
        description: A unit of time.
      - type: object
        properties:
          name:
            type: object
          symbol:
            type: object
          definition:
            type: object
      - title: Second
        type: object
    Ampere:
      allOf:
      - $ref: '#/components/schemas/SiBaseUnit'
      - type: object
        description: A unit of electric current.
      - type: object
        properties:
          name:
            type: object
          symbol:
            type: object
          definition:
            type: object
      - title: Ampere
        type: object
    Kelvin:
      allOf:
      - $ref: '#/components/schemas/SiBaseUnit'
      - type: object
        description: A unit of thermodynamic temperature.
      - type: object
        properties:
          name:
            type: object
          symbol:
            type: object
          definition:
            type: object
      - title: Kelvin
        type: object
    Mole:
      allOf:
      - $ref: '#/components/schemas/SiBaseUnit'
      - type: object
        description: A unit of amount of substance.
      - type: object
        properties:
          name:
            type: object
          symbol:
            type: object
          definition:
            type: object
      - title: Mole
        type: object
    Candela:
      allOf:
      - $ref: '#/components/schemas/SiBaseUnit'
      - type: object
        description: A unit of luminous intensity.
      - type: object
        properties:
          name:
            type: object
          symbol:
            type: object
          definition:
            type: object
      - title: Candela
        type: object
    Kilogram:
      allOf:
      - $ref: '#/components/schemas/SiBaseUnit'
      - type: object
        description: A unit of mass.
      - type: object
        properties:
          name:
            type: object
          symbol:
            type: object
          definition:
            type: object
      - title: Kilogram
        type: object
    system-of-units:
      title: SystemOfUnits
      required:
      - nameOfSystem
      type: object
      properties:
        nameOfStandardizationBody:
          title: SystemOfUnits.nameOfStandardizationBody Schema
          type: string
          description: The name of the body responsible for the system.
          default: null
        nameOfSystem:
          title: SystemOfUnits.nameOfSystem Schema
          type: string
          description: Represents a set of related Units defined by a standard such
            as SI.
          default: ""
      description: Represents a set of related Units defined by a standard such as
        SI.
    metric:
      title: Metric
      required:
      - name
      - symbol
      type: object
      properties:
        definition:
          title: Metric.definition schema
          type: string
          description: The formal definition of the Metric.
          default: ""
        name:
          title: Metric.name schema
          type: string
          description: The name of the metric, e.g., "meters".
          default: ""
        symbol:
          title: Metric.symbol schema
          type: string
          description: The standard symbol of the Metric, e.g., "m" for meters. If
            no symbol exists, set symbol's value to null.
          default: null
      description: A representation of a standard of measurement.
    si-system-of-units:
      title: SiSystemOfUnits
      required:
      - nameOfStandardizationBody
      - nameOfSystem
      type: object
      properties:
        nameOfStandardizationBody:
          title: SiSystemOfUnits.nameOfStandardizationBody Schema
          maxLength: 4
          minLength: 4
          pattern: ^(BIPM)$
          type: string
          description: The inter-governmental organization through which Member States
            act together on matters related to measurement science and measurement
            standards.
          default: BIPM
        nameOfSystem:
          title: SiSystemOfUnits.nameOfSystem Schema
          maxLength: 2
          minLength: 2
          pattern: ^(SI)$
          type: string
          description: A system of physical units (SI Units) based on the meter, kilogram,
            second, ampere, kelvin, candela, and mole, together with a set of prefixes
            to indicate multiplication or division by a power of ten.
          default: SI
